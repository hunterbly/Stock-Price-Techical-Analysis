#library sequence is important

library(broom)
library(purrr)
library(tidyr)
library(plyr)
library(dplyr)
library(lubridate)
library(stringr)
library(quantmod)
library(RPostgreSQL)




df_stock <- read.csv(file = "C:\\Users\\chunl\\Desktop\\working dir\\2017-09-23 signal hit\\test.csv", header = TRUE,sep = ",", stringsAsFactors = FALSE)
df_stock$code <- str_pad(df_stock$code,width=4, side="left", pad="0")



signal_list <- c('s_bull_stick', 's_bear_stick', 's_bull_engulf', 's_bear_engulf', 's_bull_harami', 's_bear_harami', 's_2day_reverse_good', 's_2day_reverse_bad', 's_bull_pierce', 's_bear_pierce', 's_hammer', 's_shooting_star')

f_bull_stick <- function(open.lag0, close.lag0, upper.limit = 0.05, lower.limit = 0.04)
{
	boolean <- 	ifelse(
					((close.lag0 - open.lag0) / open.lag0) > lower.limit & 
					((close.lag0 - open.lag0) / open.lag0) < upper.limit, 
					1, 0
				)
				
	return(boolean)	
}

f_bear_stick <- function(open.lag0, close.lag0, upper.limit = -0.05, lower.limit = -0.04)
{
	boolean <- 	ifelse(
					((close.lag0 - open.lag0) / open.lag0) < lower.limit & 
					((close.lag0 - open.lag0) / open.lag0) > upper.limit, 1, 0
				)

	return(boolean)	
}

f_bull_engulf <- function(open.lag0, close.lag0, open.lag1, close.lag1)
{
	
	boolean <- 	ifelse(
					((close.lag0 > open.lag0) & 
					(open.lag1 > close.lag1) &
					(close.lag0 > open.lag1) &
					(close.lag1 > open.lag0))
					, 1, 0
				)

	return(boolean)	
}

f_bear_engulf <- function(open.lag0, close.lag0, open.lag1, close.lag1)
{	
	
	boolean <- 	ifelse(
					(close.lag0 < open.lag0) & 
					(close.lag1 > open.lag1) &
					(close.lag0 < open.lag1) &
					(close.lag1 < open.lag0)
					, 1, 0
				)

	return(boolean)	
}

f_bull_harami<- function(open.lag0, close.lag0, open.lag1, close.lag1)
{
	boolean <- 	ifelse(
					(close.lag0 > open.lag0) & 
					(close.lag1 < open.lag1) &
					(close.lag0 < open.lag1) &
					(close.lag1 < open.lag0)
					, 1, 0
				)
 
	return(boolean)	
}

f_bear_harami<- function(open.lag0, close.lag0, open.lag1, close.lag1)
{
	boolean <- 	ifelse(
					(close.lag0 < open.lag0) & 
					(close.lag1 > open.lag1) &
					(close.lag0 > open.lag1) &
					(close.lag1 > open.lag0)
					, 1, 0
				)

	return(boolean)	
}

f_2day_reverse_good<- function(open.lag0, close.lag0, open.lag1, close.lag1, open.lag2, close.lag2, today_up_threshold = 0.03, ytd_down_threshold = -0.03)
{
	boolean <- 	ifelse(
					(((close.lag0 - close.lag1) / close.lag1) > today_up_threshold) &
					(((close.lag1 - close.lag2) / close.lag2) < ytd_down_threshold)
					, 1, 0
				)

	return(boolean)	
}

f_2day_reverse_bad<- function(open.lag0, close.lag0, open.lag1, close.lag1, open.lag2, close.lag2, today_down_threshold = -0.03, ytd_up_threshold = 0.03)
{
	boolean <- 	ifelse(
					(((close.lag0 - close.lag1) / close.lag1) < today_down_threshold) &
					(((close.lag1 - close.lag2) / close.lag2) > ytd_up_threshold)
					, 1, 0
				)

	return(boolean)	
}

f_bull_pierce <- function(open.lag0, close.lag0, open.lag1, close.lag1)
{
	boolean <- 	ifelse(
					(close.lag0 > open.lag0) &
					(close.lag1 < open.lag1) &
					(open.lag0 < close.lag1) &
					(close.lag0 < open.lag1) &
					(close.lag0 >((open.lag1 + close.lag1)/2))
					, 1, 0
				)
				
	return(boolean)
}

f_bear_pierce <- function(open.lag0, close.lag0, open.lag1, close.lag1)
{
	boolean <- 	ifelse(
					(close.lag1 > open.lag1) &
					(open.lag0 > close.lag0) &
					(close.lag0 > open.lag1) &
					(close.lag0 < ((open.lag1 + close.lag1)/2)) &
					(open.lag0 > close.lag1)
					, 1, 0
				)
				
	return(boolean)
}

f_hammer <- function(open.lag0, close.lag0, open.lag1, close.lag1, low.lag0, high.lag0, tail_multiplier = 2, least_body_length = 0.005)
{
	boolean <- 	ifelse(
					(close.lag0 > open.lag0) &
					((open.lag0 - low.lag0) >= (tail_multiplier * (close.lag0 - open.lag0))) &
					(((close.lag0 - open.lag0) / open.lag0) > least_body_length) &
					((high.lag0 - close.lag0) <= (close.lag0 - open.lag0))
					, 1, 0
				)
				
	return(boolean)
}

f_shooting_star <- function(open.lag0, close.lag0, open.lag1, close.lag1, low.lag0, high.lag0, tail_multiplier = 2, least_body_length = 0.005)
{
	boolean <- 	ifelse(
				(open.lag0 > close.lag0) &
				((high.lag0 - open.lag0) >= (tail_multiplier * (open.lag0 - close.lag0))) &
				(((close.lag0 - low.lag0) <= (open.lag0 - close.lag0))) &
				(((open.lag0 - close.lag0) / open.lag0) > least_body_length)
				, 1, 0
			)
				
	return(boolean)

}

high_return <- function(df, n) {
	df %>% arrange(date)
    varname <- paste("high.return.lead", n , sep=".")
    varval <- lazyeval::interp(~(lead(high, n) - close) / close, n=n)
    mutate_(df, .dots= setNames(list(varval), varname))
}

low_return <- function(df, n) {	
	df %>% arrange(date)
    varname <- paste("low.return.lead", n , sep=".")
    varval <- lazyeval::interp(~(lead(low, n) - close) / close, n=n)
    mutate_(df, .dots= setNames(list(varval), varname))
}

calSignal <- function(df){
	
	n_day = 5
	
	data <- df %>% filter(volumn != 0) %>% arrange(date)
	
	
	data <- data %>% mutate(open.lag1 = lag(open, n = 1),
						open.lag2 = lag(open, n = 2),
						close.lag1 = lag(close, n = 1),
						close.lag2 = lag(close, n = 2))
	
	data <- data %>% mutate(s_bull_stick = f_bull_stick(open, close),
					s_bear_stick = f_bear_stick(open, close),
					s_bull_engulf = f_bull_engulf(open, close, open.lag1, close.lag1),
					s_bear_engulf = f_bear_engulf(open, close, open.lag1, close.lag1),
					s_bull_harami = f_bull_harami(open, close, open.lag1, close.lag1),
					s_bear_harami = f_bear_harami(open, close, open.lag1, close.lag1),
					s_2day_reverse_good = f_2day_reverse_good(open, close, open.lag1, close.lag1, open.lag2, close.lag2),
					s_2day_reverse_bad = f_2day_reverse_bad(open, close, open.lag1, close.lag1, open.lag2, close.lag2),
					s_bull_pierce = f_bull_pierce(open, close, open.lag1, close.lag1),
					s_bear_pierce = f_bear_pierce(open, close, open.lag1, close.lag1),
					s_hammer = f_hammer(open, close, open.lag1, close.lag1, low, high, tail_multiplier = 2, least_body_length = 0.005),
					s_shooting_star = f_shooting_star(open, close, open.lag1, close.lag1, low, high, tail_multiplier = 2, least_body_length = 0.005))

	
	for(i in 1:n_day) {				 
		data <- high_return(df = data, n=i)
		data <-  low_return(df = data, n=i)
	}
	
	
	# mutate for max high and min low for next 5 trading days to evaluate signal hit, keep na.rm = FALSE on purpose, so we dont get the value for next trading day < 5
	data <- data %>% mutate(max.high = select(., matches('high.return.lead')) %>% purrr::pmap_dbl(max, na.rm = FALSE),
							min.low = select(., matches('low.return.lead')) %>% purrr::pmap_dbl(min, na.rm = FALSE))
							
	# data <- data %>% mutate(max.high = select(., matches('high.return.lead')) %>% purrr::pmap_dbl(max, na.rm = TRUE),
	#						min.low = select(., matches('low.return.lead')) %>% purrr::pmap_dbl(min, na.rm = TRUE))
	
	# rowSums to get the days with signal, to filter out those days that have signal into database for calculating signal hits
	data <- data %>% mutate(has.signal = select(., starts_with('s_')) %>% rowSums(na.rm = TRUE))

	# Replace infinity with NA
	data$max.high <- sapply(data$max.high, function(x){replace(x, is.infinite(x),NA)})
	data$min.low <- sapply(data$min.low, function(x){replace(x, is.infinite(x),NA)})
	
	data %>% arrange(desc(date))
}


# mutate signal, percentage return for next n trading day, max, min return after signal hit
data.signal <- df_stock %>% nest(-code) %>% mutate(signal = map(data, ~calSignal(.))) %>% unnest(signal)

# filter only has signal data to save into database, and filter out 
data.signal.hit <- data.signal %>% filter(has.signal >= 1 & !is.na(max.high) & !is.na(min.low))

# select certain fields only, then wide to long
data.signal.hit.wide <- data.signal.hit %>% select(id, code, date, starts_with('s_'), starts_with('high.return'), starts_with('low.return'), max.high, min.low)
data.signal.hit.long <- melt(data.signal.hit.wide, measure.vars = signal_list, variable.name="signal",value.name="hit")

# filter no signal records, then round 4 sig fig before export / saving to db
data.signal.hit.long.nz <- data.signal.hit.long %>% filter(hit != 0)
data.signal.hit.long.nz <- data.signal.hit.long.nz %>% mutate_at(.vars=vars(matches("low|high|max|min", ignore.case=FALSE)), .funs=funs(round(.,4))) %>% arrange(code, desc(date), signal)

# write.csv(data.signal.hit.long.nz, "signal_hit.csv", row.names=FALSE)